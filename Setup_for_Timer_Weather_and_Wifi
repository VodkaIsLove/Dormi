#include <ESP8266WiFi.h>
#include <OpenWeather.h>
#include <WiFiUdp.h>
#include <NTPClient.h>


// WLAN-Zugangsdaten
const char* ssid     = "DEIN_SSID"; // HIER WLAN-SSID EINTRAGEN
const char* password = "DEIN_WIFI_PASSWORT"; // HIER  WLAN-PASSWORT EINTRAGEN


// OpenWeatherMap API
#define OWM_API_KEY "DEIN_API_KEY" // HIER  OPENWEATHERMAP API-SCHLÜSSEL EINTRAGEN


// Standort (Stadtname)
const char* cityName = "Oldenburg,de"; // HIER STADTNAME EINTRAGEN (z.B. "Berlin,de")

// OpenWeather Client
OpenWeatherClient owm(OWM_API_KEY);

// NTP Client für Timer
WiFiUDP ntpUDP;
const long utcOffsetInSeconds = 3600;         // MEZ
NTPClient timeClient(ntpUDP, "pool.ntp.org", utcOffsetInSeconds);

// Timer-Variablen
unsigned long timerStartEpoch = 0;
bool timerRunning = false;


// Wetter-Funktion
/**
 * Liest die aktuelle Temperatur (°C) der eingestellten Stadt.
 * @return Temperatur in °C oder NAN bei Fehler.
 */
float getCurrentTemperature() {
  WeatherData data = owm.getCurrentWeather();
  if (data.isValid()) {
    return data.temperature;
  }
  return NAN;
}


// Timer-Funktionen
/**
 * Startet den 1-Stunden-Timer.
 */
void startTimer() {
  timeClient.update();
  timerStartEpoch = timeClient.getEpochTime();
  timerRunning = true;
}

/**
 * Prüft, ob der Timer noch läuft.
 * @return true, wenn weniger als 3600s seit Start vergangen sind.
 */
bool isTimerActive() {
  if (!timerRunning) return false;
  timeClient.update();
  return (timeClient.getEpochTime() - timerStartEpoch) < 3600;
}

/**
 * Gibt die verbleibende Zeit in Sekunden zurück.
 * @return Restsekunden oder 0.
 */
unsigned long getTimerRemaining() {
  if (!timerRunning) return 0;
  timeClient.update();
  unsigned long elapsed = timeClient.getEpochTime() - timerStartEpoch;
  if (elapsed < 3600) return 3600 - elapsed;
  timerRunning = false;
  return 0;
}

void setup() {
  // WLAN-Verbindung
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }

  // Clients starten
  timeClient.begin();
  owm.setCity(cityName);
}

void loop() {
  // Leerer Loop: Funktionen intern verwendbar
  // getCurrentTemperature(), startTimer(), isTimerActive(), getTimerRemaining()
  delay(1000);
}
